public class MyHeap {
    public void heapInsert(int[] nums, int idx) {
        // 从当前节点开始, 一直与它的父节点比较, 如果父节点比我大,就结束比较
        while (nums[(idx - 1) / 2] < nums[idx]) {
            // 当前节点比父节点大,交换值
            swap(nums, (idx - 1) / 2, idx);
            // 当前节点来到原先的父节点位置
            idx = (idx - 1) / 2;
        }
    }

    public void heapfiy(int[] nums, int idx, int size) {
        int left = idx * 2 + 1;
        // 首先要确定有没有子节点，如果左子节点都没有，那就直接结束
        while (left < size) {
            // 在确定有左子节点的情况下，看看是否有右子节点
            int right = left + 1 < size ? left + 1 : -1;
            // 找到一个最大的子节点
            int largest = right != -1 && nums[right] > nums[left] ? right : left;
            // 如果我最大的子节点都比我小，那就找到了应该在的位置了，结束
            if (nums[largest] < nums[idx]) {
                break;
            }
            // 交换父子节点
            swap(nums, largest, idx);
            // 来到子节点的下标
            idx = largest;
            // 获得左子节点的下标
            left = idx * 2 + 1;
        }
    }

    public void swap(int[] nums, int i, int j) {
        int t = nums[i];
        nums[i] = nums[j];
        nums[j] = t;
    }
}
