class Solution {
    public int wiggleMaxLength(int[] nums) {
        int len = nums.length;
        if(len < 2){
            return len; 
        }
        //dp[i] 的含义是在 [0, i] 中 最长的摆动序列
        int[] dp = new int[len];
        // 前一个状态
        int prev = nums[1] - nums[0];
        dp[0] = 1;
        dp[1] = prev != 0 ? 2 : 1;
        for(int i = 2; i < len; i++){
            // 当前状态
            int curr = nums[i] - nums[i-1];
            //处理初始时重复值的情况
            if(prev == 0 && curr != 0){
                dp[i] = dp[i - 1] + 1;
                prev = curr;
                continue;
            }
            if((curr > 0 && prev < 0) || (curr < 0 && prev > 0)){
                //如果符合摆动, 处理状态转移
                dp[i] = dp[i - 1] + 1;
                prev = curr;
            } else {
                //如果不符合摆动,认为更改当前遇到的 nums[i] 为波动序列的最后一个值
                dp[i] = dp[i - 1];
            }
        }
        return dp[len-1];
    }
}
===================================================================
class Solution {
    public int wiggleMaxLength(int[] nums) {
        int len = nums.length;
        if(len < 2){
            return len; 
        }
        int[][] dp = new int[len][2];
        // 0 -> up, 1 -> down
        dp[0][0] = 1;
        dp[0][1] = 1;
        for(int i = 1; i < len; i++){
            int curr = nums[i] - nums[i-1];
            //上升
            if(curr > 0){
                dp[i][0] = dp[i-1][1] + 1;
                dp[i][1] = dp[i-1][1];
            //下降
            } else if(curr < 0){
                dp[i][0] = dp[i-1][0];
                dp[i][1] = dp[i-1][0] + 1;
            } else {
                dp[i][0] = dp[i-1][0];
                dp[i][1] = dp[i-1][1];
            }
        }
        return Math.max(dp[len-1][0], dp[len-1][1]);
    }
}
